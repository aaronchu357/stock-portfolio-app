{"ast":null,"code":"import _slicedToArray from \"/Users/aaronchu/Development/stock-portfolio-app/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/Portfolio.js\";\nimport React, { useState, useEffect } from 'react';\nimport BuyStockForm from '../forms/BuyStockForm';\nimport StocksContainer from './StocksContainer';\n\nconst Portfolio = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        stocks = _useState2[0],\n        setStocks = _useState2[1];\n\n  useEffect(() => {\n    if (props.userData) {\n      // API request from nested endpoint user/:id/transactions\n      fetch(\"http://localhost:3000/users/\".concat(props.userData.id, \"/transactions\")).then(resp => resp.json()).then(userTransactions => {\n        let finalAssortedTransactionsArray = []; // count number of shares for each stock\n\n        let sortedTransactions = {};\n        userTransactions.data.forEach(transaction => {\n          if (sortedTransactions[transaction.attributes.stock.ticker]) {\n            sortedTransactions[transaction.attributes.stock.ticker] += transaction.attributes.quantity;\n          } else {\n            sortedTransactions[transaction.attributes.stock.ticker] = transaction.attributes.quantity;\n          }\n        }); // convert the sorted hash to individual objects in array\n\n        Object.keys(sortedTransactions).forEach(key => {\n          let stockToPush = {};\n          stockToPush[key] = sortedTransactions[key];\n          finalAssortedTransactionsArray = [...finalAssortedTransactionsArray, stockToPush];\n        });\n        setStocks(finalAssortedTransactionsArray);\n      });\n    }\n  }, [props.userData]);\n\n  const handleStockFormSubmit = (ticker, quantity) => {\n    fetch(\"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\".concat(ticker, \"&apikey=GJNL5RPAWAUNFOK6\")).then(resp => resp.json()).then(stockData => {\n      let userBalance = props.userData.attributes.balance;\n      let price = parseFloat(stockData[\"Global Quote\"][\"05. price\"]);\n      let transactionTotal = price * quantity;\n\n      if (userBalance < transactionTotal) {\n        alert(\"Balance insufficient. Transaction total is \".concat(transactionTotal, \".\"));\n      } else {\n        handleStock(ticker, quantity, price, transactionTotal);\n      }\n    }).catch(error => alert('Oops, something went wrong! Check that you have entered a valid symbol'));\n  };\n\n  const handleStock = (ticker, quantity, price, total) => {\n    let stockInfo = {\n      ticker: ticker\n    };\n    fetch('http://localhost:3000/stocks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(stockInfo)\n    }).then(resp => resp.json()).then(stockData => {\n      handleTransaction(stockData.data, price, quantity, total);\n    }).catch(error => console.log(error));\n  };\n\n  const handleTransaction = (stockData, price, quantity, total) => {\n    let transactionInfo = {\n      quantity: parseInt(quantity),\n      user_id: props.userData.id,\n      stock_id: parseInt(stockData.id),\n      price: price\n    };\n    fetch('http://localhost:3000/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(transactionInfo)\n    }).then(resp => resp.json()).then(transactionData => {\n      let balance = props.userData.attributes.balance;\n      let remainingBalance = balance - total;\n      props.handleBalanceChange(remainingBalance);\n    }).catch(error => console.log(error));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"portfolio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, props.userData ? React.createElement(StocksContainer, {\n    userData: props.userData,\n    stocks: stocks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }) : 'Loading...', React.createElement(BuyStockForm, Object.assign({}, props, {\n    handleStockFormSubmit: handleStockFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })));\n};\n\nexport default Portfolio;","map":{"version":3,"sources":["/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/Portfolio.js"],"names":["React","useState","useEffect","BuyStockForm","StocksContainer","Portfolio","props","stocks","setStocks","userData","fetch","id","then","resp","json","userTransactions","finalAssortedTransactionsArray","sortedTransactions","data","forEach","transaction","attributes","stock","ticker","quantity","Object","keys","key","stockToPush","handleStockFormSubmit","stockData","userBalance","balance","price","parseFloat","transactionTotal","alert","handleStock","catch","error","total","stockInfo","method","headers","Authorization","localStorage","token","body","JSON","stringify","handleTransaction","console","log","transactionInfo","parseInt","user_id","stock_id","transactionData","remainingBalance","handleBalanceChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport BuyStockForm from '../forms/BuyStockForm'\nimport StocksContainer from './StocksContainer'\n\nconst Portfolio = props => {\n\n  const [stocks, setStocks] = useState([])\n\n  useEffect(() => {\n    if (props.userData) {\n      // API request from nested endpoint user/:id/transactions\n      fetch(`http://localhost:3000/users/${props.userData.id}/transactions`)\n        .then(resp => resp.json())\n        .then(userTransactions => {\n          let finalAssortedTransactionsArray = []\n          // count number of shares for each stock\n          let sortedTransactions = {}\n          userTransactions.data.forEach(transaction => {\n            if (sortedTransactions[transaction.attributes.stock.ticker]) {\n              sortedTransactions[transaction.attributes.stock.ticker] += transaction.attributes.quantity\n            } else {\n              sortedTransactions[transaction.attributes.stock.ticker] = transaction.attributes.quantity\n            }\n          })\n          // convert the sorted hash to individual objects in array\n          Object.keys(sortedTransactions).forEach(key => {\n            let stockToPush = {}\n            stockToPush[key] = sortedTransactions[key]\n            finalAssortedTransactionsArray = [...finalAssortedTransactionsArray, stockToPush]\n          })\n          setStocks(finalAssortedTransactionsArray)\n        })\n    }\n  }, [props.userData])\n\n  const handleStockFormSubmit = (ticker, quantity) => {\n    fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=GJNL5RPAWAUNFOK6`)\n      .then(resp => resp.json())\n      .then(stockData => {\n        let userBalance = props.userData.attributes.balance\n        let price = parseFloat(stockData[\"Global Quote\"][\"05. price\"])\n        let transactionTotal = price * quantity\n        if (userBalance < transactionTotal) {\n          alert(`Balance insufficient. Transaction total is ${transactionTotal}.`)\n        } else {\n          handleStock(ticker, quantity, price, transactionTotal)\n        }\n      })\n      .catch(error => alert('Oops, something went wrong! Check that you have entered a valid symbol'))\n  }\n\n  const handleStock = (ticker, quantity, price, total) => {\n    let stockInfo = { ticker: ticker }\n    fetch('http://localhost:3000/stocks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(stockInfo)\n    })\n      .then(resp => resp.json())\n      .then(stockData => {\n        handleTransaction(stockData.data, price, quantity, total)\n      })\n      .catch(error => console.log(error))\n  }\n\n  const handleTransaction = (stockData, price, quantity, total) => {\n    let transactionInfo = {\n      quantity: parseInt(quantity),\n      user_id: props.userData.id,\n      stock_id: parseInt(stockData.id),\n      price: price\n    }\n    fetch('http://localhost:3000/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(transactionInfo)\n    })\n      .then(resp => resp.json())\n      .then(transactionData => {\n        let balance = props.userData.attributes.balance\n        let remainingBalance = balance - total\n        props.handleBalanceChange(remainingBalance)\n      })\n      .catch(error => console.log(error))\n  }\n\n  return (\n    <div className=\"portfolio\">\n      {props.userData ? <StocksContainer userData={props.userData} stocks={stocks} /> : 'Loading...'}\n      <BuyStockForm {...props} handleStockFormSubmit={handleStockFormSubmit} />\n    </div>\n  )\n}\n\nexport default Portfolio"]},"metadata":{},"sourceType":"module"}