{"ast":null,"code":"import _slicedToArray from \"/Users/aaronchu/Development/stock-portfolio-app/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/Portfolio.js\";\nimport React, { useState, useEffect } from 'react';\nimport BuyStockForm from '../forms/BuyStockForm';\nimport PortfolioStock from './PortfolioStock';\n\nconst Portfolio = props => {\n  // const [userData, setUserData] = useState('')\n  // const [userBalance, setUserBalance] = useState('')\n  // useEffect(() => {\n  //   if (props.userData !== \"\") {\n  //     setUserData(props.userData)\n  //     setUserBalance(props.userData.attributes.balance)\n  //   } else {\n  //     props.history.push('/signin')\n  //   }\n  // }, [userData])\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        stocks = _useState2[0],\n        setStocks = _useState2[1];\n\n  useEffect(() => {\n    if (props.userData) {\n      fetch(\"http://localhost:3000/users/\".concat(props.userData.id)).then(resp => resp.json()).then(userInfo => {\n        let sortedTransactions = {};\n        debugger;\n        userInfo.data.attributes.transactions.forEach(transaction => {\n          debugger;\n\n          if (sortedTransactions[transaction.stock_id]) {\n            sortedTransactions[transaction.stock_id] += sortedTransactions[transaction.quantity];\n          } else {\n            sortedTransactions[transaction.stock_id] = sortedTransactions[transaction.quantity];\n          }\n        });\n      });\n    }\n  });\n\n  const handleStockFormSubmit = (ticker, quantity) => {\n    fetch(\"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\".concat(ticker, \"&apikey=GJNL5RPAWAUNFOK6\")).then(resp => resp.json()).then(stockData => {\n      debugger;\n      let userBalance = props.userData.attributes.balance;\n      let price = parseFloat(stockData[\"Global Quote\"][\"05. price\"]);\n      let transactionTotal = price * quantity;\n\n      if (userBalance < transactionTotal) {\n        alert(\"Balance insufficient. Transaction total is \".concat(transactionTotal, \".\"));\n      } else {\n        handleStock(ticker, quantity, price, transactionTotal);\n      }\n    }).catch(error => console.log(error));\n  };\n\n  const handleStock = (ticker, quantity, price, total) => {\n    let stockInfo = {\n      ticker: ticker,\n      price: price\n    };\n    fetch('http://localhost:3000/stocks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(stockInfo)\n    }).then(resp => resp.json()).then(stockData => {\n      handleTransaction(stockData.data, quantity, total);\n    }).catch(error => console.log(error));\n  };\n\n  const handleTransaction = (stockData, quantity, total) => {\n    let transactionInfo = {\n      quantity: parseInt(quantity),\n      user_id: props.userData.id,\n      stock_id: parseInt(stockData.id)\n    };\n    fetch('http://localhost:3000/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(transactionInfo)\n    }).then(resp => resp.json()).then(transactionData => {\n      console.log(total);\n      let balance = props.userData.attributes.balance;\n      let remainingBalance = balance - total;\n      props.handleBalanceChange(remainingBalance); // setUserData(\n      //   {\n      //     ...userData,\n      //     attributes: {\n      //       ...userData.attributes,\n      //       balance: remainingBalance\n      //     }\n      //   }\n      // )\n    }).catch(error => console.log(error));\n  }; // const handleBalanceChange = (remainingBalance) => {\n  //   fetch(`http://localhost:3000/users/${this.props.userData.id}`, {\n  //     method: 'PATCH',\n  //     headers: {\n  //       'Accept': 'application/json',\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ balance: remainingBalance })\n  //   })\n  //     .then(resp => resp.json())\n  //     .then(userData => {\n  //       setUserData(userData.data)\n  //     })\n  // }\n\n\n  return React.createElement(\"div\", {\n    className: \"portfolio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(PortfolioStock, {\n    userData: props.userData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(BuyStockForm, Object.assign({}, props, {\n    handleStockFormSubmit: handleStockFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })));\n};\n\nexport default Portfolio;","map":{"version":3,"sources":["/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/Portfolio.js"],"names":["React","useState","useEffect","BuyStockForm","PortfolioStock","Portfolio","props","stocks","setStocks","userData","fetch","id","then","resp","json","userInfo","sortedTransactions","data","attributes","transactions","forEach","transaction","stock_id","quantity","handleStockFormSubmit","ticker","stockData","userBalance","balance","price","parseFloat","transactionTotal","alert","handleStock","catch","error","console","log","total","stockInfo","method","headers","Authorization","localStorage","token","body","JSON","stringify","handleTransaction","transactionInfo","parseInt","user_id","transactionData","remainingBalance","handleBalanceChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport BuyStockForm from '../forms/BuyStockForm'\nimport PortfolioStock from './PortfolioStock'\n\nconst Portfolio = props => {\n\n  // const [userData, setUserData] = useState('')\n  // const [userBalance, setUserBalance] = useState('')\n\n  // useEffect(() => {\n  //   if (props.userData !== \"\") {\n  //     setUserData(props.userData)\n  //     setUserBalance(props.userData.attributes.balance)\n  //   } else {\n  //     props.history.push('/signin')\n  //   }\n  // }, [userData])\n\n  const [stocks, setStocks] = useState([])\n  useEffect(() => {\n    if(props.userData){\n      fetch(`http://localhost:3000/users/${props.userData.id}`)\n      .then(resp => resp.json())\n      .then(userInfo => {\n        let sortedTransactions = {}\n        debugger\n        userInfo.data.attributes.transactions.forEach(transaction => {\n          debugger\n          if(sortedTransactions[transaction.stock_id]){\n            sortedTransactions[transaction.stock_id] += sortedTransactions[transaction.quantity]\n          } else {\n            sortedTransactions[transaction.stock_id] = sortedTransactions[transaction.quantity]\n          }\n        })\n      })\n    }\n  })\n\n  const handleStockFormSubmit = (ticker, quantity) => {\n    fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=GJNL5RPAWAUNFOK6`)\n      .then(resp => resp.json())\n      .then(stockData => {\n        debugger\n        let userBalance = props.userData.attributes.balance\n        let price = parseFloat(stockData[\"Global Quote\"][\"05. price\"])\n        let transactionTotal = price * quantity\n        if (userBalance < transactionTotal) {\n          alert(`Balance insufficient. Transaction total is ${transactionTotal}.`)\n        } else {\n          handleStock(ticker, quantity, price, transactionTotal)\n        }\n      })\n      .catch(error => console.log(error))\n  }\n\n  const handleStock = (ticker, quantity, price, total) => {\n    let stockInfo = { ticker: ticker, price: price }\n    fetch('http://localhost:3000/stocks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(stockInfo)\n    })\n      .then(resp => resp.json())\n      .then(stockData => {\n        handleTransaction(stockData.data, quantity, total)\n      })\n      .catch(error => console.log(error))\n  }\n\n  const handleTransaction = (stockData, quantity, total) => {\n    let transactionInfo = {\n      quantity: parseInt(quantity),\n      user_id: props.userData.id,\n      stock_id: parseInt(stockData.id)\n    }\n    fetch('http://localhost:3000/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(transactionInfo)\n    })\n      .then(resp => resp.json())\n      .then(transactionData => {\n        console.log(total)\n        let balance = props.userData.attributes.balance\n        let remainingBalance = balance - total\n        props.handleBalanceChange(remainingBalance)\n        // setUserData(\n        //   {\n        //     ...userData,\n        //     attributes: {\n        //       ...userData.attributes,\n        //       balance: remainingBalance\n        //     }\n        //   }\n        // )\n      })\n      .catch(error => console.log(error))\n  }\n\n  // const handleBalanceChange = (remainingBalance) => {\n  //   fetch(`http://localhost:3000/users/${this.props.userData.id}`, {\n  //     method: 'PATCH',\n  //     headers: {\n  //       'Accept': 'application/json',\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ balance: remainingBalance })\n  //   })\n  //     .then(resp => resp.json())\n  //     .then(userData => {\n  //       setUserData(userData.data)\n  //     })\n  // }\n  return (\n    <div className=\"portfolio\">\n      {/* {console.log(\"1\")}\n      <h2 className=\"page-header\">Portfolio</h2>\n      Hi, {userData ? userData.attributes.name : null}\n      <br /> */}\n      <PortfolioStock userData={props.userData} />\n      {/* Balance: {userBalance ? userBalance : null} */}\n      <BuyStockForm {...props} handleStockFormSubmit={handleStockFormSubmit} />\n    </div>\n  )\n}\n\nexport default Portfolio"]},"metadata":{},"sourceType":"module"}