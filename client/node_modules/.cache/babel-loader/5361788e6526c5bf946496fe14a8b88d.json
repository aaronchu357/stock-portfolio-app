{"ast":null,"code":"import _slicedToArray from \"/Users/aaronchu/Development/stock-portfolio-app/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/Portfolio.js\";\nimport React, { useState, useEffect } from 'react';\nimport BuyStockForm from '../forms/BuyStockForm';\nimport PortfolioStock from './PortfolioStock';\n\nconst Portfolio = props => {\n  // const [userData, setUserData] = useState('')\n  // const [userBalance, setUserBalance] = useState('')\n  // useEffect(() => {\n  //   if (props.userData !== \"\") {\n  //     setUserData(props.userData)\n  //     setUserBalance(props.userData.attributes.balance)\n  //   } else {\n  //     props.history.push('/signin')\n  //   }\n  // }, [userData])\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        stocks = _useState2[0],\n        setStocks = _useState2[1];\n\n  useEffect(() => {\n    if (props.userData) {\n      // API request from users endpoint\n      // fetch(`http://localhost:3000/users/${props.userData.id}`)\n      // .then(resp => resp.json())\n      // .then(userInfo => {\n      //   let final = []\n      //   let sortedTransactions = {}\n      //   userInfo.data.attributes.transactions.forEach(transaction => {\n      //     if(sortedTransactions[transaction.stock_id]){\n      //       sortedTransactions[transaction.stock_id] += sortedTransactions[transaction.quantity]\n      //     } else {\n      //       sortedTransactions[transaction.stock_id] = transaction.quantity\n      //     }\n      //   })\n      //   console.log(sortedTransactions)\n      //   Object.keys(sortedTransactions).forEach(key => {\n      //     let stockToPush = {}\n      //     stockToPush[key] = sortedTransactions[key]\n      //     final.push(stockToPush)\n      //   }) \n      //   setStocks(final)\n      // API request from nested endpoint user/:id/transactions\n      fetch(\"http://localhost:3000/users/\".concat(props.userData.id, \"/transactions\")).then(resp => resp.json()).then(userTransactions => {\n        let final = [];\n        let sortedTransactions = {};\n        userTransactions.data.forEach(transaction => {\n          if (sortedTransactions[transaction.attributes.stock.ticker]) {\n            debugger;\n            sortedTransactions[transaction.attributes.stock.ticker] += transaction.attributes.quantity;\n          } else {\n            sortedTransactions[transaction.attributes.stock.ticker] = transaction.attributes.quantity;\n          }\n        });\n        console.log(sortedTransactions);\n        Object.keys(sortedTransactions).forEach(key => {\n          debugger;\n          let stockToPush = {};\n          stockToPush[key] = sortedTransactions[key];\n          final.push(stockToPush);\n        });\n        setStocks(userTransactions.data);\n      });\n    }\n  }, [props.userData]);\n\n  const handleStockFormSubmit = (ticker, quantity) => {\n    fetch(\"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\".concat(ticker, \"&apikey=GJNL5RPAWAUNFOK6\")).then(resp => resp.json()).then(stockData => {\n      let userBalance = props.userData.attributes.balance;\n      let price = parseFloat(stockData[\"Global Quote\"][\"05. price\"]);\n      let transactionTotal = price * quantity;\n\n      if (userBalance < transactionTotal) {\n        alert(\"Balance insufficient. Transaction total is \".concat(transactionTotal, \".\"));\n      } else {\n        handleStock(ticker, quantity, price, transactionTotal);\n      }\n    }).catch(error => console.log(error));\n  };\n\n  const handleStock = (ticker, quantity, price, total) => {\n    let stockInfo = {\n      ticker: ticker\n    };\n    fetch('http://localhost:3000/stocks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(stockInfo)\n    }).then(resp => resp.json()).then(stockData => {\n      handleTransaction(stockData.data, price, quantity, total);\n    }).catch(error => console.log(error));\n  };\n\n  const handleTransaction = (stockData, price, quantity, total) => {\n    let transactionInfo = {\n      quantity: parseInt(quantity),\n      user_id: props.userData.id,\n      stock_id: parseInt(stockData.id),\n      price: price\n    };\n    fetch('http://localhost:3000/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(transactionInfo)\n    }).then(resp => resp.json()).then(transactionData => {\n      console.log(total);\n      let balance = props.userData.attributes.balance;\n      let remainingBalance = balance - total;\n      debugger;\n      props.handleBalanceChange(remainingBalance); // setUserData(\n      //   {\n      //     ...userData,\n      //     attributes: {\n      //       ...userData.attributes,\n      //       balance: remainingBalance\n      //     }\n      //   }\n      // )\n    }).catch(error => console.log(error));\n  }; // const handleBalanceChange = (remainingBalance) => {\n  //   fetch(`http://localhost:3000/users/${this.props.userData.id}`, {\n  //     method: 'PATCH',\n  //     headers: {\n  //       'Accept': 'application/json',\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ balance: remainingBalance })\n  //   })\n  //     .then(resp => resp.json())\n  //     .then(userData => {\n  //       setUserData(userData.data)\n  //     })\n  // }\n\n\n  return React.createElement(\"div\", {\n    className: \"portfolio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(PortfolioStock, {\n    userData: props.userData,\n    stocks: stocks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }), React.createElement(BuyStockForm, Object.assign({}, props, {\n    handleStockFormSubmit: handleStockFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  })));\n};\n\nexport default Portfolio;","map":{"version":3,"sources":["/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/Portfolio.js"],"names":["React","useState","useEffect","BuyStockForm","PortfolioStock","Portfolio","props","stocks","setStocks","userData","fetch","id","then","resp","json","userTransactions","final","sortedTransactions","data","forEach","transaction","attributes","stock","ticker","quantity","console","log","Object","keys","key","stockToPush","push","handleStockFormSubmit","stockData","userBalance","balance","price","parseFloat","transactionTotal","alert","handleStock","catch","error","total","stockInfo","method","headers","Authorization","localStorage","token","body","JSON","stringify","handleTransaction","transactionInfo","parseInt","user_id","stock_id","transactionData","remainingBalance","handleBalanceChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport BuyStockForm from '../forms/BuyStockForm'\nimport PortfolioStock from './PortfolioStock'\n\nconst Portfolio = props => {\n\n  // const [userData, setUserData] = useState('')\n  // const [userBalance, setUserBalance] = useState('')\n\n  // useEffect(() => {\n  //   if (props.userData !== \"\") {\n  //     setUserData(props.userData)\n  //     setUserBalance(props.userData.attributes.balance)\n  //   } else {\n  //     props.history.push('/signin')\n  //   }\n  // }, [userData])\n\n  const [stocks, setStocks] = useState([])\n  useEffect(() => {\n    if (props.userData) {\n      // API request from users endpoint\n      // fetch(`http://localhost:3000/users/${props.userData.id}`)\n      // .then(resp => resp.json())\n      // .then(userInfo => {\n      //   let final = []\n      //   let sortedTransactions = {}\n      //   userInfo.data.attributes.transactions.forEach(transaction => {\n      //     if(sortedTransactions[transaction.stock_id]){\n      //       sortedTransactions[transaction.stock_id] += sortedTransactions[transaction.quantity]\n      //     } else {\n      //       sortedTransactions[transaction.stock_id] = transaction.quantity\n      //     }\n      //   })\n      //   console.log(sortedTransactions)\n      //   Object.keys(sortedTransactions).forEach(key => {\n      //     let stockToPush = {}\n      //     stockToPush[key] = sortedTransactions[key]\n      //     final.push(stockToPush)\n      //   }) \n      //   setStocks(final)\n\n      // API request from nested endpoint user/:id/transactions\n      fetch(`http://localhost:3000/users/${props.userData.id}/transactions`)\n        .then(resp => resp.json())\n        .then(userTransactions => {\n          let final = []\n          let sortedTransactions = {}\n          userTransactions.data.forEach(transaction => {\n            if (sortedTransactions[transaction.attributes.stock.ticker]) {\n              debugger\n              sortedTransactions[transaction.attributes.stock.ticker] += transaction.attributes.quantity\n            } else {\n              sortedTransactions[transaction.attributes.stock.ticker] = transaction.attributes.quantity\n            }\n          })\n          console.log(sortedTransactions)\n          Object.keys(sortedTransactions).forEach(key => {\n            debugger\n            let stockToPush = {}\n            stockToPush[key] = sortedTransactions[key]\n            final.push(stockToPush)\n          })\n          setStocks(userTransactions.data)\n        })\n    }\n  }, [props.userData])\n\n  const handleStockFormSubmit = (ticker, quantity) => {\n    fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=GJNL5RPAWAUNFOK6`)\n      .then(resp => resp.json())\n      .then(stockData => {\n        let userBalance = props.userData.attributes.balance\n        let price = parseFloat(stockData[\"Global Quote\"][\"05. price\"])\n        let transactionTotal = price * quantity\n        if (userBalance < transactionTotal) {\n          alert(`Balance insufficient. Transaction total is ${transactionTotal}.`)\n        } else {\n          handleStock(ticker, quantity, price, transactionTotal)\n        }\n      })\n      .catch(error => console.log(error))\n  }\n\n  const handleStock = (ticker, quantity, price, total) => {\n    let stockInfo = { ticker: ticker }\n    fetch('http://localhost:3000/stocks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(stockInfo)\n    })\n      .then(resp => resp.json())\n      .then(stockData => {\n        handleTransaction(stockData.data, price, quantity, total)\n      })\n      .catch(error => console.log(error))\n  }\n\n  const handleTransaction = (stockData, price, quantity, total) => {\n    let transactionInfo = {\n      quantity: parseInt(quantity),\n      user_id: props.userData.id,\n      stock_id: parseInt(stockData.id),\n      price: price\n    }\n    fetch('http://localhost:3000/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(transactionInfo)\n    })\n      .then(resp => resp.json())\n      .then(transactionData => {\n        console.log(total)\n        let balance = props.userData.attributes.balance\n        let remainingBalance = balance - total\n        debugger\n        props.handleBalanceChange(remainingBalance)\n        // setUserData(\n        //   {\n        //     ...userData,\n        //     attributes: {\n        //       ...userData.attributes,\n        //       balance: remainingBalance\n        //     }\n        //   }\n        // )\n      })\n      .catch(error => console.log(error))\n  }\n\n  // const handleBalanceChange = (remainingBalance) => {\n  //   fetch(`http://localhost:3000/users/${this.props.userData.id}`, {\n  //     method: 'PATCH',\n  //     headers: {\n  //       'Accept': 'application/json',\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ balance: remainingBalance })\n  //   })\n  //     .then(resp => resp.json())\n  //     .then(userData => {\n  //       setUserData(userData.data)\n  //     })\n  // }\n  return (\n    <div className=\"portfolio\">\n      {/* {console.log(\"1\")}\n      <h2 className=\"page-header\">Portfolio</h2>\n      Hi, {userData ? userData.attributes.name : null}\n      <br /> */}\n      <PortfolioStock userData={props.userData} stocks={stocks} />\n      {/* Balance: {userBalance ? userBalance : null} */}\n      <BuyStockForm {...props} handleStockFormSubmit={handleStockFormSubmit} />\n    </div>\n  )\n}\n\nexport default Portfolio"]},"metadata":{},"sourceType":"module"}