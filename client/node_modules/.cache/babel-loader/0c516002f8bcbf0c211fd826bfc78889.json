{"ast":null,"code":"import _slicedToArray from \"/Users/aaronchu/Development/stock-portfolio-app/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aaronchu/Development/stock-portfolio-app/frontend/src/components/Stock.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst Stock = props => {\n  const _useState = useState({\n    price: '',\n    dayOpenPrice: '',\n    color: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        stockState = _useState2[0],\n        setStockState = _useState2[1];\n\n  useEffect(() => {\n    // Limited to 5 calls per minute, unable to show more than 5 stocks at once\n    fetch(\"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\".concat(Object.keys(props.stockData)[0], \"&apikey=GJNL5RPAWAUNFOK6\")).then(resp => resp.json()).then(stockData => {\n      let currentPrice = parseFloat(stockData[\"Global Quote\"][\"05. price\"]);\n      let openPrice = parseFloat(stockData[\"Global Quote\"][\"02. open\"]);\n      let tickerColor = '';\n\n      if (currentPrice > openPrice) {\n        tickerColor = 'green';\n      } else if (currentPrice < openPrice) {\n        tickerColor = 'red';\n      } else {\n        tickerColor = 'grey';\n      }\n\n      setStockState({\n        price: currentPrice,\n        dayOpenPrice: openPrice,\n        color: tickerColor\n      });\n    }).catch(error => {\n      console.log(error);\n      alert('Sorry about some of your portfolio data. You have reached the limit for API calls. Please wait 60 seconds and try again.');\n    });\n  }, [props.stockData]);\n  return React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"em\", {\n    className: \"stock-ticker\",\n    style: {\n      color: \"\".concat(stockState.color)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, Object.keys(props.stockData)[0]), \" - \", Object.values(props.stockData)[0], \" \", Object.values(props.stockData)[0] === 1 ? \"Share\" : \"Shares\", \" Value: $\", Math.round(stockState.price * Object.values(props.stockData)[0] * 10000) / 10000);\n};\n\nexport default Stock;","map":{"version":3,"sources":["/Users/aaronchu/Development/stock-portfolio-app/frontend/src/components/Stock.js"],"names":["React","useState","useEffect","Stock","props","price","dayOpenPrice","color","stockState","setStockState","fetch","Object","keys","stockData","then","resp","json","currentPrice","parseFloat","openPrice","tickerColor","catch","error","console","log","alert","values","Math","round"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAAA,oBAEeH,QAAQ,CAAC;AAC3CI,IAAAA,KAAK,EAAE,EADoC;AAE3CC,IAAAA,YAAY,EAAE,EAF6B;AAG3CC,IAAAA,KAAK,EAAE;AAHoC,GAAD,CAFvB;AAAA;AAAA,QAEdC,UAFc;AAAA,QAEFC,aAFE;;AAQrBP,EAAAA,SAAS,CAAC,MAAM;AACd;AACAQ,IAAAA,KAAK,0EAAmEC,MAAM,CAACC,IAAP,CAAYR,KAAK,CAACS,SAAlB,EAA6B,CAA7B,CAAnE,8BAAL,CACGC,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAEGF,IAFH,CAEQD,SAAS,IAAI;AACjB,UAAII,YAAY,GAAGC,UAAU,CAACL,SAAS,CAAC,cAAD,CAAT,CAA0B,WAA1B,CAAD,CAA7B;AACA,UAAIM,SAAS,GAAGD,UAAU,CAACL,SAAS,CAAC,cAAD,CAAT,CAA0B,UAA1B,CAAD,CAA1B;AACA,UAAIO,WAAW,GAAG,EAAlB;;AACA,UAAIH,YAAY,GAAGE,SAAnB,EAA8B;AAC5BC,QAAAA,WAAW,GAAG,OAAd;AACD,OAFD,MAEO,IAAIH,YAAY,GAAGE,SAAnB,EAA8B;AACnCC,QAAAA,WAAW,GAAG,KAAd;AACD,OAFM,MAEA;AACLA,QAAAA,WAAW,GAAG,MAAd;AACD;;AACDX,MAAAA,aAAa,CAAC;AACZJ,QAAAA,KAAK,EAAEY,YADK;AAEZX,QAAAA,YAAY,EAAEa,SAFF;AAGZZ,QAAAA,KAAK,EAAEa;AAHK,OAAD,CAAb;AAKD,KAlBH,EAmBGC,KAnBH,CAmBSC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,MAAAA,KAAK,CAAC,0HAAD,CAAL;AACD,KAtBH;AAuBD,GAzBQ,EAyBN,CAACrB,KAAK,CAACS,SAAP,CAzBM,CAAT;AA2BA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,cAAd;AAA6B,IAAA,KAAK,EAAE;AAAEN,MAAAA,KAAK,YAAKC,UAAU,CAACD,KAAhB;AAAP,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuEI,MAAM,CAACC,IAAP,CAAYR,KAAK,CAACS,SAAlB,EAA6B,CAA7B,CAAvE,CADF,SACkHF,MAAM,CAACe,MAAP,CAActB,KAAK,CAACS,SAApB,EAA+B,CAA/B,CADlH,OACsJF,MAAM,CAACe,MAAP,CAActB,KAAK,CAACS,SAApB,EAA+B,CAA/B,MAAsC,CAAtC,GAA0C,OAA1C,GAAoD,QAD1M,eAC8Nc,IAAI,CAACC,KAAL,CAAWpB,UAAU,CAACH,KAAX,GAAmBM,MAAM,CAACe,MAAP,CAActB,KAAK,CAACS,SAApB,EAA+B,CAA/B,CAAnB,GAAuD,KAAlE,IAA2E,KADzS,CADF;AAKD,CAxCD;;AA0CA,eAAeV,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst Stock = props => {\n\n  const [stockState, setStockState] = useState({\n    price: '',\n    dayOpenPrice: '',\n    color: ''\n  })\n\n  useEffect(() => {\n    // Limited to 5 calls per minute, unable to show more than 5 stocks at once\n    fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${Object.keys(props.stockData)[0]}&apikey=GJNL5RPAWAUNFOK6`)\n      .then(resp => resp.json())\n      .then(stockData => {\n        let currentPrice = parseFloat(stockData[\"Global Quote\"][\"05. price\"])\n        let openPrice = parseFloat(stockData[\"Global Quote\"][\"02. open\"])\n        let tickerColor = ''\n        if (currentPrice > openPrice) {\n          tickerColor = 'green'\n        } else if (currentPrice < openPrice) {\n          tickerColor = 'red'\n        } else {\n          tickerColor = 'grey'\n        }\n        setStockState({\n          price: currentPrice,\n          dayOpenPrice: openPrice,\n          color: tickerColor\n        })\n      })\n      .catch(error => {\n        console.log(error)\n        alert('Sorry about some of your portfolio data. You have reached the limit for API calls. Please wait 60 seconds and try again.')\n      })\n  }, [props.stockData])\n\n  return (\n    <li>\n      <em className=\"stock-ticker\" style={{ color: `${stockState.color}` }}>{Object.keys(props.stockData)[0]}</em> - {Object.values(props.stockData)[0]} {Object.values(props.stockData)[0] === 1 ? \"Share\" : \"Shares\" } Value: ${Math.round(stockState.price * Object.values(props.stockData)[0] * 10000) / 10000}\n    </li>\n  )\n}\n\nexport default Stock"]},"metadata":{},"sourceType":"module"}