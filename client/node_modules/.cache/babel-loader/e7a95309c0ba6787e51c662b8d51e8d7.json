{"ast":null,"code":"import _slicedToArray from \"/Users/aaronchu/Development/stock-portfolio-app/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/Portfolio.js\";\nimport React, { useState, useEffect } from 'react';\nimport BuyStockForm from '../forms/BuyStockForm';\nimport PortfolioStock from './PortfolioStock';\n\nconst Portfolio = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        userData = _useState2[0],\n        setUserData = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        userBalance = _useState4[0],\n        setUserBalance = _useState4[1];\n\n  useEffect(() => {\n    if (props.userData !== \"\") {\n      setUserData(props.userData);\n      setUserBalance(props.userData.attributes.balance);\n    } else {\n      props.history.push('/signin');\n    }\n  });\n\n  const handleStockFormSubmit = (ticker, quantity) => {\n    fetch(\"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\".concat(ticker, \"&apikey=GJNL5RPAWAUNFOK6\")).then(resp => resp.json()).then(stockData => {\n      let userBalance = props.userData.attributes.balance;\n      let price = parseFloat(stockData[\"Global Quote\"][\"05. price\"]);\n      let transactionTotal = price * quantity;\n\n      if (userBalance < transactionTotal) {\n        alert(\"Balance insufficient. Transaction total is \".concat(transactionTotal, \".\"));\n      } else {\n        handleStock(ticker, quantity, price, transactionTotal);\n      }\n    }).catch(error => console.log(error));\n  };\n\n  const handleStock = (ticker, quantity, price, total) => {\n    let stockInfo = {\n      ticker: ticker,\n      price: price\n    };\n    fetch('http://localhost:3000/stocks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(stockInfo)\n    }).then(resp => resp.json()).then(stockData => {\n      handleTransaction(stockData.data, quantity, total);\n    }).catch(error => console.log(error));\n  };\n\n  const handleTransaction = (stockData, quantity, total) => {\n    let transactionInfo = {\n      quantity: parseInt(quantity),\n      user_id: props.userData.id,\n      stock_id: parseInt(stockData.id)\n    };\n    fetch('http://localhost:3000/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(transactionInfo)\n    }).then(resp => resp.json()).then(transactionData => {\n      console.log(total);\n      let a = props;\n      let balance = userData.attributes.balance;\n      let remainingBalance = balance - total;\n      debugger;\n      handleBalanceChange(remainingBalance); // setUserData(\n      //   {\n      //     ...userData,\n      //     attributes: {\n      //       ...userData.attributes,\n      //       balance: remainingBalance\n      //     }\n      //   }\n      // )\n    }).catch(error => console.log(error));\n  };\n\n  const handleBalanceChange = remainingBalance => {\n    fetch(\"http://localhost:3000/users/\".concat(userData.id), {\n      method: 'PATCH',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        balance: remainingBalance\n      })\n    }).then(resp => resp.json()).then(userData => {\n      setUserData(userData);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"portfolio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"page-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Portfolio\"), \"Hi, \", userData ? userData.attributes.name : null, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(PortfolioStock, {\n    userData: userData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), \"Balance: \", userBalance ? userBalance : null, React.createElement(BuyStockForm, Object.assign({}, props, {\n    handleStockFormSubmit: handleStockFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })));\n};\n\nexport default Portfolio;","map":{"version":3,"sources":["/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/Portfolio.js"],"names":["React","useState","useEffect","BuyStockForm","PortfolioStock","Portfolio","props","userData","setUserData","userBalance","setUserBalance","attributes","balance","history","push","handleStockFormSubmit","ticker","quantity","fetch","then","resp","json","stockData","price","parseFloat","transactionTotal","alert","handleStock","catch","error","console","log","total","stockInfo","method","headers","Authorization","localStorage","token","body","JSON","stringify","handleTransaction","data","transactionInfo","parseInt","user_id","id","stock_id","transactionData","a","remainingBalance","handleBalanceChange","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport BuyStockForm from '../forms/BuyStockForm'\nimport PortfolioStock from './PortfolioStock'\n\nconst Portfolio = props => {\n\n  const [userData, setUserData] = useState('')\n  const [userBalance, setUserBalance] = useState('')\n\n  useEffect(() => {\n    if (props.userData !== \"\") {\n      setUserData(props.userData)\n      setUserBalance(props.userData.attributes.balance)\n    } else {\n      props.history.push('/signin')\n    }\n  })\n\n  const handleStockFormSubmit = (ticker, quantity) => {\n    fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=GJNL5RPAWAUNFOK6`)\n      .then(resp => resp.json())\n      .then(stockData => {\n        let userBalance = props.userData.attributes.balance\n        let price = parseFloat(stockData[\"Global Quote\"][\"05. price\"])\n        let transactionTotal = price * quantity\n        if (userBalance < transactionTotal) {\n          alert(`Balance insufficient. Transaction total is ${transactionTotal}.`)\n        } else {\n          handleStock(ticker, quantity, price, transactionTotal)\n        }\n      })\n      .catch(error => console.log(error))\n  }\n\n  const handleStock = (ticker, quantity, price, total) => {\n    let stockInfo = { ticker: ticker, price: price }\n    fetch('http://localhost:3000/stocks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(stockInfo)\n    })\n      .then(resp => resp.json())\n      .then(stockData => {\n        handleTransaction(stockData.data, quantity, total)\n      })\n      .catch(error => console.log(error))\n  }\n\n  const handleTransaction = (stockData, quantity, total) => {\n    let transactionInfo = {\n      quantity: parseInt(quantity),\n      user_id: props.userData.id,\n      stock_id: parseInt(stockData.id)\n    }\n    fetch('http://localhost:3000/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(transactionInfo)\n    })\n      .then(resp => resp.json())\n      .then(transactionData => {\n        console.log(total)\n        let a = props\n        let balance = userData.attributes.balance\n        let remainingBalance = balance - total\n        debugger\n        handleBalanceChange(remainingBalance)\n        // setUserData(\n        //   {\n        //     ...userData,\n        //     attributes: {\n        //       ...userData.attributes,\n        //       balance: remainingBalance\n        //     }\n        //   }\n        // )\n      })\n      .catch(error => console.log(error))\n  }\n\n  const handleBalanceChange = (remainingBalance) => {\n    fetch(`http://localhost:3000/users/${userData.id}`, {\n      method: 'PATCH',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ balance: remainingBalance })\n    })\n      .then(resp => resp.json())\n      .then(userData => {\n        setUserData(userData)\n      })\n  }\n\n  return (\n    <div className=\"portfolio\">\n      <h2 className=\"page-header\">Portfolio</h2>\n      Hi, {userData ? userData.attributes.name : null}\n      <br />\n      <PortfolioStock userData={userData} />\n      Balance: {userBalance ? userBalance : null}\n      <BuyStockForm {...props} handleStockFormSubmit={handleStockFormSubmit} />\n    </div>\n  )\n}\n\nexport default Portfolio"]},"metadata":{},"sourceType":"module"}