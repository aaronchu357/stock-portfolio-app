{"ast":null,"code":"var _jsxFileName = \"/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/Portfolio.js\";\nimport React, { useState, useEffect } from 'react';\nimport BuyStockForm from '../forms/BuyStockForm';\nimport PortfolioStock from './PortfolioStock';\n\nconst Portfolio = props => {\n  // const [userData, setUserData] = useState('')\n  // const [userBalance, setUserBalance] = useState('')\n  // useEffect(() => {\n  //   if (props.userData !== \"\") {\n  //     setUserData(props.userData)\n  //     setUserBalance(props.userData.attributes.balance)\n  //   } else {\n  //     props.history.push('/signin')\n  //   }\n  // }, [userData])\n  const handleStockFormSubmit = (ticker, quantity) => {\n    fetch(\"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\".concat(ticker, \"&apikey=GJNL5RPAWAUNFOK6\")).then(resp => resp.json()).then(stockData => {\n      let userBalance = this.props.userData.attributes.balance;\n      let price = parseFloat(stockData[\"Global Quote\"][\"05. price\"]);\n      let transactionTotal = price * quantity;\n\n      if (userBalance < transactionTotal) {\n        alert(\"Balance insufficient. Transaction total is \".concat(transactionTotal, \".\"));\n      } else {\n        handleStock(ticker, quantity, price, transactionTotal);\n      }\n    }).catch(error => console.log(error));\n  };\n\n  const handleStock = (ticker, quantity, price, total) => {\n    let stockInfo = {\n      ticker: ticker,\n      price: price\n    };\n    fetch('http://localhost:3000/stocks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(stockInfo)\n    }).then(resp => resp.json()).then(stockData => {\n      handleTransaction(stockData.data, quantity, total);\n    }).catch(error => console.log(error));\n  };\n\n  const handleTransaction = (stockData, quantity, total) => {\n    let transactionInfo = {\n      quantity: parseInt(quantity),\n      user_id: this.props.userData.id,\n      stock_id: parseInt(stockData.id)\n    };\n    fetch('http://localhost:3000/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(transactionInfo)\n    }).then(resp => resp.json()).then(transactionData => {\n      console.log(total);\n      let balance = this.props.userData.attributes.balance;\n      let remainingBalance = balance - total;\n      this.props.handleBalanceChange(remainingBalance); // setUserData(\n      //   {\n      //     ...userData,\n      //     attributes: {\n      //       ...userData.attributes,\n      //       balance: remainingBalance\n      //     }\n      //   }\n      // )\n    }).catch(error => console.log(error));\n  }; // const handleBalanceChange = (remainingBalance) => {\n  //   fetch(`http://localhost:3000/users/${this.props.userData.id}`, {\n  //     method: 'PATCH',\n  //     headers: {\n  //       'Accept': 'application/json',\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ balance: remainingBalance })\n  //   })\n  //     .then(resp => resp.json())\n  //     .then(userData => {\n  //       setUserData(userData.data)\n  //     })\n  // }\n  // debugger\n\n\n  return React.createElement(\"div\", {\n    className: \"portfolio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(PortfolioStock, {\n    userData: userData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(BuyStockForm, Object.assign({}, props, {\n    handleStockFormSubmit: handleStockFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })));\n};\n\nexport default Portfolio;","map":{"version":3,"sources":["/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/Portfolio.js"],"names":["React","useState","useEffect","BuyStockForm","PortfolioStock","Portfolio","props","handleStockFormSubmit","ticker","quantity","fetch","then","resp","json","stockData","userBalance","userData","attributes","balance","price","parseFloat","transactionTotal","alert","handleStock","catch","error","console","log","total","stockInfo","method","headers","Authorization","localStorage","token","body","JSON","stringify","handleTransaction","data","transactionInfo","parseInt","user_id","id","stock_id","transactionData","remainingBalance","handleBalanceChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport BuyStockForm from '../forms/BuyStockForm'\nimport PortfolioStock from './PortfolioStock'\n\nconst Portfolio = props => {\n\n  // const [userData, setUserData] = useState('')\n  // const [userBalance, setUserBalance] = useState('')\n\n  // useEffect(() => {\n  //   if (props.userData !== \"\") {\n  //     setUserData(props.userData)\n  //     setUserBalance(props.userData.attributes.balance)\n  //   } else {\n  //     props.history.push('/signin')\n  //   }\n  // }, [userData])\n\n  const handleStockFormSubmit = (ticker, quantity) => {\n    fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=GJNL5RPAWAUNFOK6`)\n      .then(resp => resp.json())\n      .then(stockData => {\n        let userBalance = this.props.userData.attributes.balance\n        let price = parseFloat(stockData[\"Global Quote\"][\"05. price\"])\n        let transactionTotal = price * quantity\n        if (userBalance < transactionTotal) {\n          alert(`Balance insufficient. Transaction total is ${transactionTotal}.`)\n        } else {\n          handleStock(ticker, quantity, price, transactionTotal)\n        }\n      })\n      .catch(error => console.log(error))\n  }\n\n  const handleStock = (ticker, quantity, price, total) => {\n    let stockInfo = { ticker: ticker, price: price }\n    fetch('http://localhost:3000/stocks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(stockInfo)\n    })\n      .then(resp => resp.json())\n      .then(stockData => {\n        handleTransaction(stockData.data, quantity, total)\n      })\n      .catch(error => console.log(error))\n  }\n\n  const handleTransaction = (stockData, quantity, total) => {\n    let transactionInfo = {\n      quantity: parseInt(quantity),\n      user_id: this.props.userData.id,\n      stock_id: parseInt(stockData.id)\n    }\n    fetch('http://localhost:3000/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify(transactionInfo)\n    })\n      .then(resp => resp.json())\n      .then(transactionData => {\n        console.log(total)\n        let balance = this.props.userData.attributes.balance\n        let remainingBalance = balance - total\n        this.props.handleBalanceChange(remainingBalance)\n        // setUserData(\n        //   {\n        //     ...userData,\n        //     attributes: {\n        //       ...userData.attributes,\n        //       balance: remainingBalance\n        //     }\n        //   }\n        // )\n      })\n      .catch(error => console.log(error))\n  }\n\n  // const handleBalanceChange = (remainingBalance) => {\n  //   fetch(`http://localhost:3000/users/${this.props.userData.id}`, {\n  //     method: 'PATCH',\n  //     headers: {\n  //       'Accept': 'application/json',\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ balance: remainingBalance })\n  //   })\n  //     .then(resp => resp.json())\n  //     .then(userData => {\n  //       setUserData(userData.data)\n  //     })\n  // }\n  // debugger\n  return (\n    <div className=\"portfolio\">\n      {/* {console.log(\"1\")}\n      <h2 className=\"page-header\">Portfolio</h2>\n      Hi, {userData ? userData.attributes.name : null}\n      <br /> */}\n      <PortfolioStock userData={userData} />\n      {/* Balance: {userBalance ? userBalance : null} */}\n      <BuyStockForm {...props} handleStockFormSubmit={handleStockFormSubmit} />\n    </div>\n  )\n}\n\nexport default Portfolio"]},"metadata":{},"sourceType":"module"}