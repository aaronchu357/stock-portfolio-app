{"ast":null,"code":"var _jsxFileName = \"/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/TransactionsContainer.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst TransactionsContainer = props => {\n  useEffect(() => {\n    if (props.userData) {\n      // API request from nested endpoint user/:id/transactions\n      fetch(\"http://localhost:3000/users/\".concat(props.userData.id, \"/transactions\")).then(resp => resp.json()).then(userTransactions => {\n        debugger;\n        let finalAssortedTransactionsArray = []; // count number of shares for each stock\n\n        let sortedTransactions = {};\n        userTransactions.data.forEach(transaction => {\n          if (sortedTransactions[transaction.attributes.stock.ticker]) {\n            sortedTransactions[transaction.attributes.stock.ticker] += transaction.attributes.quantity;\n          } else {\n            sortedTransactions[transaction.attributes.stock.ticker] = transaction.attributes.quantity;\n          }\n        }); // convert the sorted hash to individual objects in array\n\n        Object.keys(sortedTransactions).forEach(key => {\n          let stockToPush = {};\n          stockToPush[key] = sortedTransactions[key];\n          finalAssortedTransactionsArray = [...finalAssortedTransactionsArray, stockToPush];\n        }); // setStocks(finalAssortedTransactionsArray)\n      });\n    }\n  }, [props.userData]);\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  });\n};\n\nexport default TransactionsContainer;","map":{"version":3,"sources":["/Users/aaronchu/Development/stock-portfolio-app/frontend/src/containers/TransactionsContainer.js"],"names":["React","useState","useEffect","TransactionsContainer","props","userData","fetch","id","then","resp","json","userTransactions","finalAssortedTransactionsArray","sortedTransactions","data","forEach","transaction","attributes","stock","ticker","quantity","Object","keys","key","stockToPush"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,qBAAqB,GAAGC,KAAK,IAAI;AACrCF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,KAAK,CAACC,QAAV,EAAoB;AAClB;AACAC,MAAAA,KAAK,uCAAgCF,KAAK,CAACC,QAAN,CAAeE,EAA/C,mBAAL,CACGC,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAEGF,IAFH,CAEQG,gBAAgB,IAAI;AACxB;AACA,YAAIC,8BAA8B,GAAG,EAArC,CAFwB,CAGxB;;AACA,YAAIC,kBAAkB,GAAG,EAAzB;AACAF,QAAAA,gBAAgB,CAACG,IAAjB,CAAsBC,OAAtB,CAA8BC,WAAW,IAAI;AAC3C,cAAIH,kBAAkB,CAACG,WAAW,CAACC,UAAZ,CAAuBC,KAAvB,CAA6BC,MAA9B,CAAtB,EAA6D;AAC3DN,YAAAA,kBAAkB,CAACG,WAAW,CAACC,UAAZ,CAAuBC,KAAvB,CAA6BC,MAA9B,CAAlB,IAA2DH,WAAW,CAACC,UAAZ,CAAuBG,QAAlF;AACD,WAFD,MAEO;AACLP,YAAAA,kBAAkB,CAACG,WAAW,CAACC,UAAZ,CAAuBC,KAAvB,CAA6BC,MAA9B,CAAlB,GAA0DH,WAAW,CAACC,UAAZ,CAAuBG,QAAjF;AACD;AACF,SAND,EALwB,CAYxB;;AACAC,QAAAA,MAAM,CAACC,IAAP,CAAYT,kBAAZ,EAAgCE,OAAhC,CAAwCQ,GAAG,IAAI;AAC7C,cAAIC,WAAW,GAAG,EAAlB;AACAA,UAAAA,WAAW,CAACD,GAAD,CAAX,GAAmBV,kBAAkB,CAACU,GAAD,CAArC;AACAX,UAAAA,8BAA8B,GAAG,CAAC,GAAGA,8BAAJ,EAAoCY,WAApC,CAAjC;AACD,SAJD,EAbwB,CAkBxB;AACD,OArBH;AAsBD;AACF,GA1BQ,EA0BN,CAACpB,KAAK,CAACC,QAAP,CA1BM,CAAT;AA4BA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKD,CAlCD;;AAoCA,eAAeF,qBAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst TransactionsContainer = props => {\n  useEffect(() => {\n    if (props.userData) {\n      // API request from nested endpoint user/:id/transactions\n      fetch(`http://localhost:3000/users/${props.userData.id}/transactions`)\n        .then(resp => resp.json())\n        .then(userTransactions => {\n          debugger\n          let finalAssortedTransactionsArray = []\n          // count number of shares for each stock\n          let sortedTransactions = {}\n          userTransactions.data.forEach(transaction => {\n            if (sortedTransactions[transaction.attributes.stock.ticker]) {\n              sortedTransactions[transaction.attributes.stock.ticker] += transaction.attributes.quantity\n            } else {\n              sortedTransactions[transaction.attributes.stock.ticker] = transaction.attributes.quantity\n            }\n          })\n          // convert the sorted hash to individual objects in array\n          Object.keys(sortedTransactions).forEach(key => {\n            let stockToPush = {}\n            stockToPush[key] = sortedTransactions[key]\n            finalAssortedTransactionsArray = [...finalAssortedTransactionsArray, stockToPush]\n          })\n          // setStocks(finalAssortedTransactionsArray)\n        })\n    }\n  }, [props.userData])\n\n  return(\n    <ul>\n\n    </ul>\n  )\n}\n\nexport default TransactionsContainer"]},"metadata":{},"sourceType":"module"}